{% extends 'base.html.twig' %}

{% block body %}
<div id="wrapper">
        <div id="container" class="container">
        
        <p/>Quelques élements SVG
        <div class="SVG">
        
            <svg width="500" height="50">
    	    	<rect x="0" y="0" width="500" height="50"/>   
    	    </svg>
    	    <div>
    	    <svg width="500" height="50">
    	    	<circle cx="250" cy="25" r="25"/> 
    	    </svg>
    	    </div>

    	    <svg width="500" height="50">
    	    	<ellipse cx="250" cy="25" rx="100" ry="25"/>  
    	    </svg>
    	    <svg width="500" height="50">
    	    	<line x1="0" y1="0" x2="500" y2="50" stroke="black"/>   
    	    </svg>
    	    <svg width="500" height="50">
    	    	<text x="250" y="25" font-family="sans-serif"
 				font-size="25" fill="gray">Easy-peasy
 				</text>
    	    </svg>
    	    <div>
        	    <svg width="500" height="50">
                    <circle cx="250" cy="25" r="22"
                     fill="yellow" stroke="orange" stroke-width="5"/>
        	    </svg>
    	    </div>
    	    <div>
        	    <svg width="500" height="50">
                    <circle cx="250" cy="25" r="22"
                     class="drug"/>
        	    </svg>
    	    </div>  
    	    <div>
        	    <svg width="500" height="50">
                    <rect x="0" y="0" width="30" height="30" fill="purple"/>
                    <rect x="20" y="5" width="30" height="30" fill="blue"/>
                    <rect x="40" y="10" width="30" height="30" fill="green"/>
                    <rect x="60" y="15" width="30" height="30" fill="yellow"/>
                    <rect x="80" y="20" width="30" height="30" fill="red"/>
        	    </svg>
    	    </div>
    	    <div>
        	    <svg width="500" height="50">
                    <circle cx="25" cy="25" r="20" fill="rgba(128, 0, 128, 1.0)"/>
                    <circle cx="50" cy="25" r="20" fill="rgba(0, 0, 255, 0.75)"/>
                    <circle cx="75" cy="25" r="20" fill="rgba(0, 255, 0, 0.5)"/>
                    <circle cx="100" cy="25" r="20" fill="rgba(255, 255, 0, 0.25)"/>
                    <circle cx="125" cy="25" r="20" fill="rgba(255, 0, 0, 0.1)"/>
        	    </svg>
    	    </div>  
    	    <div>
        	    <svg width="500" height="50">
                    <circle cx="25" cy="25" r="20"
                            fill="rgba(128, 0, 128, 0.75)" 
                            stroke="rgba(0, 255, 0, 0.25)" stroke-width="10"/>
                    <circle cx="75" cy="25" r="20"
                            fill="rgba(0, 255, 0, 0.75)"
                            stroke="rgba(0, 0, 255, 0.25)" stroke-width="10"/>
                    <circle cx="125" cy="25" r="20"
                            fill="rgba(255, 255, 0, 0.75)"
                            stroke="rgba(255, 0, 0, 0.25)" stroke-width="10"/>
        	    </svg>
    	    </div>  
    	    <div>
        	    <svg width="500" height="50">
                    <circle cx="25" cy="25" r="20" fill="purple" 
                            stroke="green" stroke-width="10"
                            opacity="0.9"/>
                    <circle cx="65" cy="25" r="20" fill="green"
                            stroke="blue" stroke-width="10"
                            opacity="0.5"/>
                    <circle cx="105" cy="25" r="20" fill="yellow"
                            stroke="red" stroke-width="10"
                            opacity="0.1"/>
        	    </svg>
    	    </div>  
    	    <div>
        	    <svg width="500" height="50">
                    <circle cx="25" cy="25" r="20"
                            fill="rgba(128, 0, 128, 0.75)" 
                            stroke="rgba(0, 255, 0, 0.25)" stroke-width="10"/>
                    <circle cx="65" cy="25" r="20"
                            fill="rgba(128, 0, 128, 0.75)" 
                            stroke="rgba(0, 255, 0, 0.25)" stroke-width="10"
                            opacity="0.5"/>
                    <circle cx="105" cy="25" r="20"
                            fill="rgba(128, 0, 128, 0.75)" 
                            stroke="rgba(0, 255, 0, 0.25)" stroke-width="10"
                            opacity="0.2"/>
        	    </svg>
    	    </div>       	      	    
        	
        </div>
    
    <p/>Tuto5 : Histogramme avec D3.js
    <div class="histo"></div>
    <p/>Tuto6 : Scatterplot D3.js
    <div class="scatter"></div>
    <p/>Tutot7 : Scaled Scatterplot 
    <div class="scatter2"></div>
    <p/>Tutot8 : Scaled Scatterplot avec axes et jeu de données aleatoire ( recharger la page pour le faire changer)
    <div class="scatter3"></div>
    
    </div>
    
        

    
{% endblock %}


{% block script %}
    <script type="text/javascript">

    	// tutoriel 1 
    	// d3.select("body").append("p").text("First test !");

/*     	var dataset = [ 5, 10, 15, 20, 25 ];
    	d3.select("body").selectAll("p")
        .data(dataset)
        .enter()
        .append("p")
        .text("New paragraph!"); */

     	// tutoriel 2 
/*      var dataset = [ 5, 10, 15, 20, 25 ];
    	d3.select("body").selectAll("p")
        .data(dataset)
        .enter()
        .append("p")
        .text(function(d) { return d; })
        .style("color", function(d) {
            if (d > 15) {   //Threshold of 15
                return "red";
            } else {
                return "black";
            }
        }); */

     	// tutoriel 3 
/*      var dataset = [ 5, 10, 15, 20, 25 ];

    	d3.select("body").selectAll("div")
    	    .data(dataset)
    	    .enter()
    	    .append("div")
    	    .text("test")
    	    .attr("class", "bar");  */

    	 // tutoriel 4     
/*     	var dataset = [ 5, 10, 15, 20, 25 ];    
    	//Width and height
    	var w = 500;
    	var h = 50;    

    	var svg = d3.select("body")
        .append("svg")
        .attr("width", w)   // <-- Here
        .attr("height", h); // <-- and here!

        var circles = svg.selectAll("circle")
        .data(dataset)
        .enter()
        .append("circle");

        circles.attr("cx", function(d, i) {
            return (i * 50) + 25;
        })
       .attr("cy", h/2)
       .attr("fill", "yellow")
	   .attr("stroke", "orange")
       .attr("r", function(d) {
            return d;
       }); */

     	// tutoriel 5
         	var dataset = [ 5, 10, 13, 19, 21, 25, 22, 18, 15, 13,
                11, 12, 15, 20, 18, 17, 16, 18, 23, 25,5, 10, 13, 19, 21, 25, 22, 18, 15, 13,
                11, 12, 15, 20, 18, 17, 16, 18, 23, 25 ];   
    	//Width and height
    	var w = 800;
    	var h = 200;
    	var heightPadding = 5;  
    	var widthPadding = 3;   
    	var dataMax = Math.max.apply(Math, dataset);

    	var svg = d3.select(".histo")
        .append("svg")
        .attr("width", w)   
        .attr("height", h); 

    	svg.selectAll("rect")
    	   .data(dataset)
    	   .enter()
    	   .append("rect")
    	   .attr("x", function(d,i){
        	   return i*(w /dataset.length);
        	   })
    	   .attr("width", function(d){
        	   return (w - dataset.length*widthPadding) /dataset.length;
    	   })
    	   .attr("height", function(d){
        	   return d*(h/dataMax) - heightPadding;
    	   })
    	   .attr("y",function(d){
    		  return h - (d*(h/dataMax) - heightPadding);
    	   })
    	   .attr("fill", function(d) {
   				 return "rgb(0, 0, " + (d * 10) + ")";
		   });

    	svg.selectAll("text")
    	   .data(dataset)
    	   .enter()
    	   .append("text")
    	   .text(function(d) {
        		return d;
   			})
   			.attr("x", function(d, i) {
        		return i * (w / dataset.length) + 5;
   			})
   			.attr("y", function(d) {
       			 return h - (d*(h/dataMax) - heightPadding) + 14;
   			})
    	.attr("font-family", "sans-serif")
    	.attr("font-size", "11px")
    	.attr("fill", "white")
    	.attr("text-anchor", "middle")
    	.attr("x", function(d, i) {
        return i * (w / dataset.length) + ( (w - dataset.length*widthPadding) /dataset.length )/2;
    	});

    	// tutoriel 6 : scatterplot
     	var dataset2 = [
            [ 5,     20 ],
            [ 480,   90 ],
            [ 250,   50 ],
            [ 100,   33 ],
            [ 330,   95 ],
            [ 410,   12 ],
            [ 475,   44 ],
            [ 25,    67 ],
            [ 85,    21 ],
            [ 220,   88 ],
            [ 600,   150 ],
            
        ]; 

        var svg2 = d3.select(".scatter")
        .append("svg")
        .attr("width", w)   
        .attr("height", h); 

        svg2
        .selectAll("circle")
        .data(dataset2)
        .enter()
        .append("circle")
        .attr("cx", function(d) {
        return d[0];
   		})
   		.attr("cy", function(d) {
        return h-d[1];
   		})
   		.attr("r", function(d) {
    		return Math.sqrt(d[1]);
		});;

		svg2.selectAll("text")
		   .data(dataset2)
		   .enter()
		   .append("text")
		   .text(function(d) {
        return d[0] + "," + d[1];
   		})
   		.attr("x", function(d) {
        return d[0];
   		})
   		.attr("y", function(d) {
        return h-d[1];
   		})
   		.attr("font-family", "sans-serif")
   		.attr("font-size", "11px")
   		.attr("fill", "red"); 

   		// tutoriel 7 : scatterplot avec scale
   		
   		var xScale = d3.scaleLinear();
		xScale.domain([0, d3.max(dataset2, function(d) {    //Returns 480
		    return d[0];  //References first value in each sub-array
		})]);
		xScale.range([40,w-40]);

		var yScale = d3.scaleLinear()
        .domain([0, d3.max(dataset2, function(d) { return d[1]; })])
        .range([20, h-20]);

		var rScale = d3.scaleLinear()
        .domain([0, d3.max(dataset2, function(d) { return d[1]; })])
        .range([2, 10]);
   		
   		
   		var svg3 = d3.select(".scatter2")
        .append("svg")
        .attr("width", w)   
        .attr("height", h); 

        svg3
        .selectAll("circle")
        .data(dataset2)
        .enter()
        .append("circle")
        .attr("cx", function(d) {
        	return xScale(d[0]);
   		})
   		.attr("cy", function(d) {
   			return h-yScale(d[1]);
   		})
   		.attr("r", function(d) {
    		return rScale(d[1]);
		});;

		svg3.selectAll("text")
		   .data(dataset2)
		   .enter()
		   .append("text")
		   .text(function(d) {
        return d[0] + "," + d[1];
   		})
   		.attr("x", function(d) {
   			return xScale(d[0]);
   		})
   		.attr("y", function(d) {
   			return h-yScale(d[1]);
   		})
   		.attr("font-family", "sans-serif")
   		.attr("font-size", "11px")
   		.attr("fill", "red");

		// tuto 8 
		//Dynamic, random dataset
		var dataset3 = [];
		var numDataPoints = 50;
		var xRange = Math.random() * 1000;
		var yRange = Math.random() * 1000;
		for (var i = 0; i < numDataPoints; i++) {
		    var newNumber1 = Math.round(Math.random() * xRange);
		    var newNumber2 = Math.round(Math.random() * yRange);
		    dataset3.push([newNumber1, newNumber2]);
		}

    	var w = 1000;
    	var h = 250;
    	var heightPadding = 20;  
    	var widthPadding = 40;   

    	// scales
    	var xScale = d3.scaleLinear()
		.domain([0, d3.max(dataset3, function(d) {    //Returns 480
		    return d[0];  //References first value in each sub-array
		})])
		.range([widthPadding,w-widthPadding]);

		var yScale = d3.scaleLinear()
        .domain([0, d3.max(dataset3, function(d) { return d[1]; })])
        .range([ h-heightPadding,heightPadding]);

		var rScale = d3.scaleLinear()
        .domain([0, d3.max(dataset3, function(d) { return d[1]; })])
        .range([2, 10]);

   		var svg4 = d3.select(".scatter3")
        .append("svg")
        .attr("width", w)   
        .attr("height", h); 
		
        // axis
        var xAxis = d3.axisBottom(xScale)
        .ticks(20);
        var yAxis = d3.axisLeft(yScale)
        .ticks(20);
   		

        svg4
        .selectAll("circle")
        .data(dataset3)
        .enter()
        .append("circle")
        .attr("cx", function(d) {
        	return xScale(d[0]);
   		})
   		.attr("cy", function(d) {
   			return yScale(d[1]);
   		})
   		.attr("r", function(d) {
    		return rScale(d[1]);
		});;

		// plus besoin de texte avec les jolix axes
		/* svg4.selectAll("text")
		   .data(dataset3)
		   .enter()
		   .append("text")
		   .text(function(d) {
        return d[0] + "," + d[1];
   		})
   		.attr("x", function(d) {
   			return xScale(d[0]);
   		})
   		.attr("y", function(d) {
   			return yScale(d[1]);
   		})
   		.attr("font-family", "sans-serif")
   		.attr("font-size", "11px")
   		.attr("fill", "red");*/
   		
     // appel des axis ( de cette manière en cas de conflit d'affichage ils sont affichés au dessus)
     svg4.append("g")
     .attr("transform", "translate(0," + (h - heightPadding) + ")")
    .call(xAxis);

     svg4.append("g")
     .attr("transform", "translate(" + (widthPadding) + ",0)")
    .call(yAxis);
      

    	
    </script>
{% endblock %}


{% block stylesheets %}
<style type="text/css">
div.bar {
    // display: inline-block;
    width: 20px;
    height: 75px;   /* We'll override this later */
    background-color: red;
}
    </style>
{% endblock %}


